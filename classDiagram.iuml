@startuml
Event --o Ticket : > has
Event -- LineUp : > has
Ticket o-- Client : < has
CampingTicket --|> Ticket
VIPTicket --|> Ticket
DayTicket --|> Ticket
Stage --o Address : > has
Client --o Address : > has
TimeSlot -- Stage : > has
LineUp --o TimeSlot : > has
LineUp --o Band : > has


class Client{
-int id
-String name
-Address address
-String phoneNumber
-LinkedList<Ticket> tickets
+Client(String name, String phoneNumber, int id, Address address)
+Ticket byTicket(TicketType type)
+boolean cancelTicket(Ticket ticket)
+Address getAddress()
}
abstract class Ticket{
enum TicketType{DAY, CAMPING, VIP}
-int ID
-String description
-boolean available
-Event event
-double stdPrice
+changePrice(Money money)
+Money getPrice()
+getDescription()
}

class Event{
-int id
-String date
-String name
-Money budget
-LineUp lineup
-LinkedList<Ticket> tickets
+Event(int id, String date, String name)
+LineUp getLineUp()
+void changeBudget(Money money)
+Money getBudget()
}
class Band{
-int id
-String name
-String phoneNumber
-double priceProEvent;
+Band(int id,String name, String phoneNumber, double priceProEvent)
+String getPhoneNumber()
+String getName()
}
class Stage{
-int id
-String name
-Address address
-int capacity
+stage(int id, String name, int capacity)
}
class Address{
-String country
-String city
-String street
-String zip
+Address(String country, String city, String street,String zip);
}
class DayTicket{
-String date
+DayTicket(int iD, boolean available, Event event, double price, String description, String date)
+getDate()
}
class CampingTicket{
+String campingPlaceName
+CampingTicket(int iD, boolean available, Event event, double price, String description, String campingPlaceName)
}
class VIPTicket{
+VIPTicket(int iD, boolean available, Event event, double price, String description)
}
class LineUp{
map<TimeSlot, Band>
+boolean addBand(Bang band, TimeSlot timeslot)
+boolean removeBand(Band band)
+LineUp getLineUp()
}
class TimeSlot{
Date date;
Stage stage
boolean free;
}
@enduml